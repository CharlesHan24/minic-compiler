State 39 conflicts: 1 shift/reduce
State 147 conflicts: 1 shift/reduce


Grammar

    0 $accept: COMP_UNIT $end

    1 COMP_UNIT: DECL
    2          | FUNC_DEF
    3          | DECL COMP_UNIT
    4          | FUNC_DEF COMP_UNIT

    5 DECL: CONST_DECL
    6     | VAR_DECL

    7 CONST_INDEXES: L_SBRAC CONST_EXP R_SBRAC
    8              | L_SBRAC CONST_EXP R_SBRAC CONST_INDEXES

    9 VAR_INDEXES: L_SBRAC EXP R_SBRAC
   10            | L_SBRAC EXP R_SBRAC VAR_INDEXES

   11 CONST_DECL: CONST INT CONST_DEFS COLON

   12 CONST_DEFS: CONST_DEF
   13           | CONST_DEF COMMA CONST_DEFS

   14 CONST_DEF: IDENTIFIER ASSIGN_OP8 CONST_INIT_VAL
   15          | IDENTIFIER CONST_INDEXES ASSIGN_OP8 CONST_INIT_VAL

   16 CONST_INIT_VAL: CONST_EXP
   17               | L_CBRAC R_CBRAC
   18               | L_CBRAC CONST_INIT_LIST R_CBRAC

   19 CONST_INIT_LIST: CONST_INIT_VAL
   20                | CONST_INIT_VAL COMMA CONST_INIT_LIST

   21 VAR_DECL: INT VAR_DEFS COLON

   22 VAR_DEFS: VAR_DEF
   23         | VAR_DEF COMMA VAR_DEFS

   24 VAR_DEF: IDENTIFIER ASSIGN_OP8 INIT_VAL
   25        | IDENTIFIER CONST_INDEXES ASSIGN_OP8 INIT_VAL
   26        | IDENTIFIER
   27        | IDENTIFIER CONST_INDEXES

   28 INIT_VAL: EXP
   29         | L_CBRAC R_CBRAC
   30         | L_CBRAC INIT_LIST R_CBRAC

   31 INIT_LIST: INIT_VAL
   32          | INIT_VAL COMMA INIT_LIST

   33 FUNC_DEF: FUNC_TYPE IDENTIFIER_FUNC R_PAR BLOCK
   34         | FUNC_TYPE IDENTIFIER_FUNC FUNC_FPARAMS R_PAR BLOCK

   35 FUNC_TYPE: INT
   36          | VOID

   37 FUNC_FPARAMS: FUNC_FPARAM
   38             | FUNC_FPARAM COMMA FUNC_FPARAMS

   39 FUNC_FPARAM: INT IDENTIFIER
   40            | INT IDENTIFIER L_SBRAC R_SBRAC
   41            | INT IDENTIFIER CONST_INDEXES
   42            | INT IDENTIFIER L_SBRAC R_SBRAC CONST_INDEXES

   43 BLOCK: L_CBRAC BLOCK_ITEMS R_CBRAC

   44 BLOCK_ITEMS: BLOCK_ITEM
   45            | BLOCK_ITEM BLOCK_ITEMS

   46 BLOCK_ITEM: DECL
   47           | STMT

   48 STMT: COLON
   49     | LVAL ASSIGN_OP8 EXP COLON
   50     | EXP
   51     | BLOCK
   52     | IF L_PAR COND R_PAR STMT
   53     | IF L_PAR COND R_PAR STMT ELSE STMT
   54     | WHILE L_PAR COND R_PAR STMT
   55     | BREAK COLON
   56     | CONTINUE COLON
   57     | RETURN COLON
   58     | RETURN EXP COLON

   59 CONST_EXP: EXP

   60 EXP: ADD_EXP

   61 ADD_EXP: MUL_EXP
   62        | ADD_EXP ADDMIN_OP3 MUL_EXP

   63 MUL_EXP: UNARY_EXP
   64        | MUL_EXP MULDIV_OP2 UNARY_EXP

   65 UNARY_EXP: PRIMARY_EXP
   66          | IDENTIFIER_FUNC R_PAR
   67          | IDENTIFIER_FUNC FUNC_RPARAMS R_PAR
   68          | UNARY_OP UNARY_EXP

   69 UNARY_OP: ADDMIN_OP3
   70         | NOT_OP1

   71 FUNC_RPARAMS: EXP
   72             | EXP COMMA FUNC_RPARAMS

   73 PRIMARY_EXP: L_PAR EXP R_PAR
   74            | LVAL
   75            | INTEGER

   76 LVAL: IDENTIFIER VAR_INDEXES
   77     | IDENTIFIER

   78 REL_EXP: ADD_EXP
   79        | REL_EXP COMP_OP4 ADD_EXP

   80 EQ_EXP: REL_EXP
   81       | EQ_EXP EQUAL_OP5 REL_EXP

   82 COND: LOR_EXP

   83 LAND_EXP: EQ_EXP
   84         | LAND_EXP AND_OP6 EQ_EXP

   85 LOR_EXP: LAND_EXP
   86        | LOR_EXP OR_OP7 LAND_EXP

   87 INTEGER: DECIMAL_TOK

   88 IDENTIFIER: IDENT

   89 IDENTIFIER_FUNC: IDENT_FUNC


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IF <name> (258) 52 53
    ELSE <name> (259) 53
    WHILE <name> (260) 54
    CONTINUE <name> (261) 56
    BREAK <name> (262) 55
    RETURN <name> (263) 57 58
    INT <name> (264) 11 21 35 39 40 41 42
    VOID <name> (265) 36
    CONST <name> (266) 11
    L_PAR <name> (267) 52 53 54 73
    R_PAR <name> (268) 33 34 52 53 54 66 67 73
    L_SBRAC <name> (269) 7 8 9 10 40 42
    R_SBRAC <name> (270) 7 8 9 10 40 42
    L_CBRAC <name> (271) 17 18 29 30 43
    R_CBRAC <name> (272) 17 18 29 30 43
    COMMA <name> (273) 13 20 23 32 38 72
    COLON <name> (274) 11 21 48 49 55 56 57 58
    DECIMAL_TOK <val> (275) 87
    IDENT <name> (276) 88
    IDENT_FUNC <name> (277) 89
    NOT_OP1 <name> (278) 70
    MULDIV_OP2 <name> (279) 64
    ADDMIN_OP3 <name> (280) 62 69
    COMP_OP4 <name> (281) 79
    EQUAL_OP5 <name> (282) 81
    AND_OP6 <name> (283) 84
    OR_OP7 <name> (284) 86
    ASSIGN_OP8 <name> (285) 14 15 24 25 49


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    COMP_UNIT <node> (32)
        on left: 1 2 3 4
        on right: 0 3 4
    DECL <node> (33)
        on left: 5 6
        on right: 1 3 46
    CONST_INDEXES <node> (34)
        on left: 7 8
        on right: 8 15 25 27 41 42
    VAR_INDEXES <node> (35)
        on left: 9 10
        on right: 10 76
    CONST_DECL <node> (36)
        on left: 11
        on right: 5
    CONST_DEFS <node> (37)
        on left: 12 13
        on right: 11 13
    CONST_DEF <node> (38)
        on left: 14 15
        on right: 12 13
    CONST_INIT_VAL <node> (39)
        on left: 16 17 18
        on right: 14 15 19 20
    CONST_INIT_LIST <node> (40)
        on left: 19 20
        on right: 18 20
    VAR_DECL <node> (41)
        on left: 21
        on right: 6
    VAR_DEFS <node> (42)
        on left: 22 23
        on right: 21 23
    VAR_DEF <node> (43)
        on left: 24 25 26 27
        on right: 22 23
    INIT_VAL <node> (44)
        on left: 28 29 30
        on right: 24 25 31 32
    INIT_LIST <node> (45)
        on left: 31 32
        on right: 30 32
    FUNC_DEF <node> (46)
        on left: 33 34
        on right: 2 4
    FUNC_TYPE <node> (47)
        on left: 35 36
        on right: 33 34
    FUNC_FPARAMS <node> (48)
        on left: 37 38
        on right: 34 38
    FUNC_FPARAM <node> (49)
        on left: 39 40 41 42
        on right: 37 38
    BLOCK <node> (50)
        on left: 43
        on right: 33 34 51
    BLOCK_ITEMS <node> (51)
        on left: 44 45
        on right: 43 45
    BLOCK_ITEM <node> (52)
        on left: 46 47
        on right: 44 45
    STMT <node> (53)
        on left: 48 49 50 51 52 53 54 55 56 57 58
        on right: 47 52 53 54
    CONST_EXP <node> (54)
        on left: 59
        on right: 7 8 16
    EXP <node> (55)
        on left: 60
        on right: 9 10 28 49 50 58 59 71 72 73
    ADD_EXP <node> (56)
        on left: 61 62
        on right: 60 62 78 79
    MUL_EXP <node> (57)
        on left: 63 64
        on right: 61 62 64
    UNARY_EXP <node> (58)
        on left: 65 66 67 68
        on right: 63 64 68
    UNARY_OP <node> (59)
        on left: 69 70
        on right: 68
    FUNC_RPARAMS <node> (60)
        on left: 71 72
        on right: 67 72
    PRIMARY_EXP <node> (61)
        on left: 73 74 75
        on right: 65
    LVAL <node> (62)
        on left: 76 77
        on right: 49 74
    REL_EXP <node> (63)
        on left: 78 79
        on right: 79 80 81
    EQ_EXP <node> (64)
        on left: 80 81
        on right: 81 83 84
    COND <node> (65)
        on left: 82
        on right: 52 53 54
    LAND_EXP <node> (66)
        on left: 83 84
        on right: 84 85 86
    LOR_EXP <node> (67)
        on left: 85 86
        on right: 82 86
    INTEGER <node> (68)
        on left: 87
        on right: 75
    IDENTIFIER <node> (69)
        on left: 88
        on right: 14 15 24 25 26 27 39 40 41 42 76 77
    IDENTIFIER_FUNC <node> (70)
        on left: 89
        on right: 33 34 66 67


State 0

    0 $accept: • COMP_UNIT $end

    INT    shift, and go to state 1
    VOID   shift, and go to state 2
    CONST  shift, and go to state 3

    COMP_UNIT   go to state 4
    DECL        go to state 5
    CONST_DECL  go to state 6
    VAR_DECL    go to state 7
    FUNC_DEF    go to state 8
    FUNC_TYPE   go to state 9


State 1

   21 VAR_DECL: INT • VAR_DEFS COLON
   35 FUNC_TYPE: INT •

    IDENT  shift, and go to state 10

    $default  reduce using rule 35 (FUNC_TYPE)

    VAR_DEFS    go to state 11
    VAR_DEF     go to state 12
    IDENTIFIER  go to state 13


State 2

   36 FUNC_TYPE: VOID •

    $default  reduce using rule 36 (FUNC_TYPE)


State 3

   11 CONST_DECL: CONST • INT CONST_DEFS COLON

    INT  shift, and go to state 14


State 4

    0 $accept: COMP_UNIT • $end

    $end  shift, and go to state 15


State 5

    1 COMP_UNIT: DECL •
    3          | DECL • COMP_UNIT

    INT    shift, and go to state 1
    VOID   shift, and go to state 2
    CONST  shift, and go to state 3

    $default  reduce using rule 1 (COMP_UNIT)

    COMP_UNIT   go to state 16
    DECL        go to state 5
    CONST_DECL  go to state 6
    VAR_DECL    go to state 7
    FUNC_DEF    go to state 8
    FUNC_TYPE   go to state 9


State 6

    5 DECL: CONST_DECL •

    $default  reduce using rule 5 (DECL)


State 7

    6 DECL: VAR_DECL •

    $default  reduce using rule 6 (DECL)


State 8

    2 COMP_UNIT: FUNC_DEF •
    4          | FUNC_DEF • COMP_UNIT

    INT    shift, and go to state 1
    VOID   shift, and go to state 2
    CONST  shift, and go to state 3

    $default  reduce using rule 2 (COMP_UNIT)

    COMP_UNIT   go to state 17
    DECL        go to state 5
    CONST_DECL  go to state 6
    VAR_DECL    go to state 7
    FUNC_DEF    go to state 8
    FUNC_TYPE   go to state 9


State 9

   33 FUNC_DEF: FUNC_TYPE • IDENTIFIER_FUNC R_PAR BLOCK
   34         | FUNC_TYPE • IDENTIFIER_FUNC FUNC_FPARAMS R_PAR BLOCK

    IDENT_FUNC  shift, and go to state 18

    IDENTIFIER_FUNC  go to state 19


State 10

   88 IDENTIFIER: IDENT •

    $default  reduce using rule 88 (IDENTIFIER)


State 11

   21 VAR_DECL: INT VAR_DEFS • COLON

    COLON  shift, and go to state 20


State 12

   22 VAR_DEFS: VAR_DEF •
   23         | VAR_DEF • COMMA VAR_DEFS

    COMMA  shift, and go to state 21

    $default  reduce using rule 22 (VAR_DEFS)


State 13

   24 VAR_DEF: IDENTIFIER • ASSIGN_OP8 INIT_VAL
   25        | IDENTIFIER • CONST_INDEXES ASSIGN_OP8 INIT_VAL
   26        | IDENTIFIER •
   27        | IDENTIFIER • CONST_INDEXES

    L_SBRAC     shift, and go to state 22
    ASSIGN_OP8  shift, and go to state 23

    $default  reduce using rule 26 (VAR_DEF)

    CONST_INDEXES  go to state 24


State 14

   11 CONST_DECL: CONST INT • CONST_DEFS COLON

    IDENT  shift, and go to state 10

    CONST_DEFS  go to state 25
    CONST_DEF   go to state 26
    IDENTIFIER  go to state 27


State 15

    0 $accept: COMP_UNIT $end •

    $default  accept


State 16

    3 COMP_UNIT: DECL COMP_UNIT •

    $default  reduce using rule 3 (COMP_UNIT)


State 17

    4 COMP_UNIT: FUNC_DEF COMP_UNIT •

    $default  reduce using rule 4 (COMP_UNIT)


State 18

   89 IDENTIFIER_FUNC: IDENT_FUNC •

    $default  reduce using rule 89 (IDENTIFIER_FUNC)


State 19

   33 FUNC_DEF: FUNC_TYPE IDENTIFIER_FUNC • R_PAR BLOCK
   34         | FUNC_TYPE IDENTIFIER_FUNC • FUNC_FPARAMS R_PAR BLOCK

    INT    shift, and go to state 28
    R_PAR  shift, and go to state 29

    FUNC_FPARAMS  go to state 30
    FUNC_FPARAM   go to state 31


State 20

   21 VAR_DECL: INT VAR_DEFS COLON •

    $default  reduce using rule 21 (VAR_DECL)


State 21

   23 VAR_DEFS: VAR_DEF COMMA • VAR_DEFS

    IDENT  shift, and go to state 10

    VAR_DEFS    go to state 32
    VAR_DEF     go to state 12
    IDENTIFIER  go to state 13


State 22

    7 CONST_INDEXES: L_SBRAC • CONST_EXP R_SBRAC
    8              | L_SBRAC • CONST_EXP R_SBRAC CONST_INDEXES

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    CONST_EXP        go to state 37
    EXP              go to state 38
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 23

   24 VAR_DEF: IDENTIFIER ASSIGN_OP8 • INIT_VAL

    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 48
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    INIT_VAL         go to state 49
    EXP              go to state 50
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 24

   25 VAR_DEF: IDENTIFIER CONST_INDEXES • ASSIGN_OP8 INIT_VAL
   27        | IDENTIFIER CONST_INDEXES •

    ASSIGN_OP8  shift, and go to state 51

    $default  reduce using rule 27 (VAR_DEF)


State 25

   11 CONST_DECL: CONST INT CONST_DEFS • COLON

    COLON  shift, and go to state 52


State 26

   12 CONST_DEFS: CONST_DEF •
   13           | CONST_DEF • COMMA CONST_DEFS

    COMMA  shift, and go to state 53

    $default  reduce using rule 12 (CONST_DEFS)


State 27

   14 CONST_DEF: IDENTIFIER • ASSIGN_OP8 CONST_INIT_VAL
   15          | IDENTIFIER • CONST_INDEXES ASSIGN_OP8 CONST_INIT_VAL

    L_SBRAC     shift, and go to state 22
    ASSIGN_OP8  shift, and go to state 54

    CONST_INDEXES  go to state 55


State 28

   39 FUNC_FPARAM: INT • IDENTIFIER
   40            | INT • IDENTIFIER L_SBRAC R_SBRAC
   41            | INT • IDENTIFIER CONST_INDEXES
   42            | INT • IDENTIFIER L_SBRAC R_SBRAC CONST_INDEXES

    IDENT  shift, and go to state 10

    IDENTIFIER  go to state 56


State 29

   33 FUNC_DEF: FUNC_TYPE IDENTIFIER_FUNC R_PAR • BLOCK

    L_CBRAC  shift, and go to state 57

    BLOCK  go to state 58


State 30

   34 FUNC_DEF: FUNC_TYPE IDENTIFIER_FUNC FUNC_FPARAMS • R_PAR BLOCK

    R_PAR  shift, and go to state 59


State 31

   37 FUNC_FPARAMS: FUNC_FPARAM •
   38             | FUNC_FPARAM • COMMA FUNC_FPARAMS

    COMMA  shift, and go to state 60

    $default  reduce using rule 37 (FUNC_FPARAMS)


State 32

   23 VAR_DEFS: VAR_DEF COMMA VAR_DEFS •

    $default  reduce using rule 23 (VAR_DEFS)


State 33

   73 PRIMARY_EXP: L_PAR • EXP R_PAR

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    EXP              go to state 61
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 34

   87 INTEGER: DECIMAL_TOK •

    $default  reduce using rule 87 (INTEGER)


State 35

   70 UNARY_OP: NOT_OP1 •

    $default  reduce using rule 70 (UNARY_OP)


State 36

   69 UNARY_OP: ADDMIN_OP3 •

    $default  reduce using rule 69 (UNARY_OP)


State 37

    7 CONST_INDEXES: L_SBRAC CONST_EXP • R_SBRAC
    8              | L_SBRAC CONST_EXP • R_SBRAC CONST_INDEXES

    R_SBRAC  shift, and go to state 62


State 38

   59 CONST_EXP: EXP •

    $default  reduce using rule 59 (CONST_EXP)


State 39

   60 EXP: ADD_EXP •
   62 ADD_EXP: ADD_EXP • ADDMIN_OP3 MUL_EXP

    ADDMIN_OP3  shift, and go to state 63

    ADDMIN_OP3  [reduce using rule 60 (EXP)]
    $default    reduce using rule 60 (EXP)


State 40

   61 ADD_EXP: MUL_EXP •
   64 MUL_EXP: MUL_EXP • MULDIV_OP2 UNARY_EXP

    MULDIV_OP2  shift, and go to state 64

    $default  reduce using rule 61 (ADD_EXP)


State 41

   63 MUL_EXP: UNARY_EXP •

    $default  reduce using rule 63 (MUL_EXP)


State 42

   68 UNARY_EXP: UNARY_OP • UNARY_EXP

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    UNARY_EXP        go to state 65
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 43

   65 UNARY_EXP: PRIMARY_EXP •

    $default  reduce using rule 65 (UNARY_EXP)


State 44

   74 PRIMARY_EXP: LVAL •

    $default  reduce using rule 74 (PRIMARY_EXP)


State 45

   75 PRIMARY_EXP: INTEGER •

    $default  reduce using rule 75 (PRIMARY_EXP)


State 46

   76 LVAL: IDENTIFIER • VAR_INDEXES
   77     | IDENTIFIER •

    L_SBRAC  shift, and go to state 66

    $default  reduce using rule 77 (LVAL)

    VAR_INDEXES  go to state 67


State 47

   66 UNARY_EXP: IDENTIFIER_FUNC • R_PAR
   67          | IDENTIFIER_FUNC • FUNC_RPARAMS R_PAR

    L_PAR        shift, and go to state 33
    R_PAR        shift, and go to state 68
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    EXP              go to state 69
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    FUNC_RPARAMS     go to state 70
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 48

   29 INIT_VAL: L_CBRAC • R_CBRAC
   30         | L_CBRAC • INIT_LIST R_CBRAC

    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 48
    R_CBRAC      shift, and go to state 71
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    INIT_VAL         go to state 72
    INIT_LIST        go to state 73
    EXP              go to state 50
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 49

   24 VAR_DEF: IDENTIFIER ASSIGN_OP8 INIT_VAL •

    $default  reduce using rule 24 (VAR_DEF)


State 50

   28 INIT_VAL: EXP •

    $default  reduce using rule 28 (INIT_VAL)


State 51

   25 VAR_DEF: IDENTIFIER CONST_INDEXES ASSIGN_OP8 • INIT_VAL

    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 48
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    INIT_VAL         go to state 74
    EXP              go to state 50
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 52

   11 CONST_DECL: CONST INT CONST_DEFS COLON •

    $default  reduce using rule 11 (CONST_DECL)


State 53

   13 CONST_DEFS: CONST_DEF COMMA • CONST_DEFS

    IDENT  shift, and go to state 10

    CONST_DEFS  go to state 75
    CONST_DEF   go to state 26
    IDENTIFIER  go to state 27


State 54

   14 CONST_DEF: IDENTIFIER ASSIGN_OP8 • CONST_INIT_VAL

    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 76
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    CONST_INIT_VAL   go to state 77
    CONST_EXP        go to state 78
    EXP              go to state 38
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 55

   15 CONST_DEF: IDENTIFIER CONST_INDEXES • ASSIGN_OP8 CONST_INIT_VAL

    ASSIGN_OP8  shift, and go to state 79


State 56

   39 FUNC_FPARAM: INT IDENTIFIER •
   40            | INT IDENTIFIER • L_SBRAC R_SBRAC
   41            | INT IDENTIFIER • CONST_INDEXES
   42            | INT IDENTIFIER • L_SBRAC R_SBRAC CONST_INDEXES

    L_SBRAC  shift, and go to state 80

    $default  reduce using rule 39 (FUNC_FPARAM)

    CONST_INDEXES  go to state 81


State 57

   43 BLOCK: L_CBRAC • BLOCK_ITEMS R_CBRAC

    IF           shift, and go to state 82
    WHILE        shift, and go to state 83
    CONTINUE     shift, and go to state 84
    BREAK        shift, and go to state 85
    RETURN       shift, and go to state 86
    INT          shift, and go to state 87
    CONST        shift, and go to state 3
    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 57
    COLON        shift, and go to state 88
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    DECL             go to state 89
    CONST_DECL       go to state 6
    VAR_DECL         go to state 7
    BLOCK            go to state 90
    BLOCK_ITEMS      go to state 91
    BLOCK_ITEM       go to state 92
    STMT             go to state 93
    EXP              go to state 94
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 95
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 58

   33 FUNC_DEF: FUNC_TYPE IDENTIFIER_FUNC R_PAR BLOCK •

    $default  reduce using rule 33 (FUNC_DEF)


State 59

   34 FUNC_DEF: FUNC_TYPE IDENTIFIER_FUNC FUNC_FPARAMS R_PAR • BLOCK

    L_CBRAC  shift, and go to state 57

    BLOCK  go to state 96


State 60

   38 FUNC_FPARAMS: FUNC_FPARAM COMMA • FUNC_FPARAMS

    INT  shift, and go to state 28

    FUNC_FPARAMS  go to state 97
    FUNC_FPARAM   go to state 31


State 61

   73 PRIMARY_EXP: L_PAR EXP • R_PAR

    R_PAR  shift, and go to state 98


State 62

    7 CONST_INDEXES: L_SBRAC CONST_EXP R_SBRAC •
    8              | L_SBRAC CONST_EXP R_SBRAC • CONST_INDEXES

    L_SBRAC  shift, and go to state 22

    $default  reduce using rule 7 (CONST_INDEXES)

    CONST_INDEXES  go to state 99


State 63

   62 ADD_EXP: ADD_EXP ADDMIN_OP3 • MUL_EXP

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    MUL_EXP          go to state 100
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 64

   64 MUL_EXP: MUL_EXP MULDIV_OP2 • UNARY_EXP

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    UNARY_EXP        go to state 101
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 65

   68 UNARY_EXP: UNARY_OP UNARY_EXP •

    $default  reduce using rule 68 (UNARY_EXP)


State 66

    9 VAR_INDEXES: L_SBRAC • EXP R_SBRAC
   10            | L_SBRAC • EXP R_SBRAC VAR_INDEXES

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    EXP              go to state 102
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 67

   76 LVAL: IDENTIFIER VAR_INDEXES •

    $default  reduce using rule 76 (LVAL)


State 68

   66 UNARY_EXP: IDENTIFIER_FUNC R_PAR •

    $default  reduce using rule 66 (UNARY_EXP)


State 69

   71 FUNC_RPARAMS: EXP •
   72             | EXP • COMMA FUNC_RPARAMS

    COMMA  shift, and go to state 103

    $default  reduce using rule 71 (FUNC_RPARAMS)


State 70

   67 UNARY_EXP: IDENTIFIER_FUNC FUNC_RPARAMS • R_PAR

    R_PAR  shift, and go to state 104


State 71

   29 INIT_VAL: L_CBRAC R_CBRAC •

    $default  reduce using rule 29 (INIT_VAL)


State 72

   31 INIT_LIST: INIT_VAL •
   32          | INIT_VAL • COMMA INIT_LIST

    COMMA  shift, and go to state 105

    $default  reduce using rule 31 (INIT_LIST)


State 73

   30 INIT_VAL: L_CBRAC INIT_LIST • R_CBRAC

    R_CBRAC  shift, and go to state 106


State 74

   25 VAR_DEF: IDENTIFIER CONST_INDEXES ASSIGN_OP8 INIT_VAL •

    $default  reduce using rule 25 (VAR_DEF)


State 75

   13 CONST_DEFS: CONST_DEF COMMA CONST_DEFS •

    $default  reduce using rule 13 (CONST_DEFS)


State 76

   17 CONST_INIT_VAL: L_CBRAC • R_CBRAC
   18               | L_CBRAC • CONST_INIT_LIST R_CBRAC

    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 76
    R_CBRAC      shift, and go to state 107
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    CONST_INIT_VAL   go to state 108
    CONST_INIT_LIST  go to state 109
    CONST_EXP        go to state 78
    EXP              go to state 38
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 77

   14 CONST_DEF: IDENTIFIER ASSIGN_OP8 CONST_INIT_VAL •

    $default  reduce using rule 14 (CONST_DEF)


State 78

   16 CONST_INIT_VAL: CONST_EXP •

    $default  reduce using rule 16 (CONST_INIT_VAL)


State 79

   15 CONST_DEF: IDENTIFIER CONST_INDEXES ASSIGN_OP8 • CONST_INIT_VAL

    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 76
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    CONST_INIT_VAL   go to state 110
    CONST_EXP        go to state 78
    EXP              go to state 38
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 80

    7 CONST_INDEXES: L_SBRAC • CONST_EXP R_SBRAC
    8              | L_SBRAC • CONST_EXP R_SBRAC CONST_INDEXES
   40 FUNC_FPARAM: INT IDENTIFIER L_SBRAC • R_SBRAC
   42            | INT IDENTIFIER L_SBRAC • R_SBRAC CONST_INDEXES

    L_PAR        shift, and go to state 33
    R_SBRAC      shift, and go to state 111
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    CONST_EXP        go to state 37
    EXP              go to state 38
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 81

   41 FUNC_FPARAM: INT IDENTIFIER CONST_INDEXES •

    $default  reduce using rule 41 (FUNC_FPARAM)


State 82

   52 STMT: IF • L_PAR COND R_PAR STMT
   53     | IF • L_PAR COND R_PAR STMT ELSE STMT

    L_PAR  shift, and go to state 112


State 83

   54 STMT: WHILE • L_PAR COND R_PAR STMT

    L_PAR  shift, and go to state 113


State 84

   56 STMT: CONTINUE • COLON

    COLON  shift, and go to state 114


State 85

   55 STMT: BREAK • COLON

    COLON  shift, and go to state 115


State 86

   57 STMT: RETURN • COLON
   58     | RETURN • EXP COLON

    L_PAR        shift, and go to state 33
    COLON        shift, and go to state 116
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    EXP              go to state 117
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 87

   21 VAR_DECL: INT • VAR_DEFS COLON

    IDENT  shift, and go to state 10

    VAR_DEFS    go to state 11
    VAR_DEF     go to state 12
    IDENTIFIER  go to state 13


State 88

   48 STMT: COLON •

    $default  reduce using rule 48 (STMT)


State 89

   46 BLOCK_ITEM: DECL •

    $default  reduce using rule 46 (BLOCK_ITEM)


State 90

   51 STMT: BLOCK •

    $default  reduce using rule 51 (STMT)


State 91

   43 BLOCK: L_CBRAC BLOCK_ITEMS • R_CBRAC

    R_CBRAC  shift, and go to state 118


State 92

   44 BLOCK_ITEMS: BLOCK_ITEM •
   45            | BLOCK_ITEM • BLOCK_ITEMS

    IF           shift, and go to state 82
    WHILE        shift, and go to state 83
    CONTINUE     shift, and go to state 84
    BREAK        shift, and go to state 85
    RETURN       shift, and go to state 86
    INT          shift, and go to state 87
    CONST        shift, and go to state 3
    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 57
    COLON        shift, and go to state 88
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    $default  reduce using rule 44 (BLOCK_ITEMS)

    DECL             go to state 89
    CONST_DECL       go to state 6
    VAR_DECL         go to state 7
    BLOCK            go to state 90
    BLOCK_ITEMS      go to state 119
    BLOCK_ITEM       go to state 92
    STMT             go to state 93
    EXP              go to state 94
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 95
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 93

   47 BLOCK_ITEM: STMT •

    $default  reduce using rule 47 (BLOCK_ITEM)


State 94

   50 STMT: EXP •

    $default  reduce using rule 50 (STMT)


State 95

   49 STMT: LVAL • ASSIGN_OP8 EXP COLON
   74 PRIMARY_EXP: LVAL •

    ASSIGN_OP8  shift, and go to state 120

    $default  reduce using rule 74 (PRIMARY_EXP)


State 96

   34 FUNC_DEF: FUNC_TYPE IDENTIFIER_FUNC FUNC_FPARAMS R_PAR BLOCK •

    $default  reduce using rule 34 (FUNC_DEF)


State 97

   38 FUNC_FPARAMS: FUNC_FPARAM COMMA FUNC_FPARAMS •

    $default  reduce using rule 38 (FUNC_FPARAMS)


State 98

   73 PRIMARY_EXP: L_PAR EXP R_PAR •

    $default  reduce using rule 73 (PRIMARY_EXP)


State 99

    8 CONST_INDEXES: L_SBRAC CONST_EXP R_SBRAC CONST_INDEXES •

    $default  reduce using rule 8 (CONST_INDEXES)


State 100

   62 ADD_EXP: ADD_EXP ADDMIN_OP3 MUL_EXP •
   64 MUL_EXP: MUL_EXP • MULDIV_OP2 UNARY_EXP

    MULDIV_OP2  shift, and go to state 64

    $default  reduce using rule 62 (ADD_EXP)


State 101

   64 MUL_EXP: MUL_EXP MULDIV_OP2 UNARY_EXP •

    $default  reduce using rule 64 (MUL_EXP)


State 102

    9 VAR_INDEXES: L_SBRAC EXP • R_SBRAC
   10            | L_SBRAC EXP • R_SBRAC VAR_INDEXES

    R_SBRAC  shift, and go to state 121


State 103

   72 FUNC_RPARAMS: EXP COMMA • FUNC_RPARAMS

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    EXP              go to state 69
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    FUNC_RPARAMS     go to state 122
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 104

   67 UNARY_EXP: IDENTIFIER_FUNC FUNC_RPARAMS R_PAR •

    $default  reduce using rule 67 (UNARY_EXP)


State 105

   32 INIT_LIST: INIT_VAL COMMA • INIT_LIST

    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 48
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    INIT_VAL         go to state 72
    INIT_LIST        go to state 123
    EXP              go to state 50
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 106

   30 INIT_VAL: L_CBRAC INIT_LIST R_CBRAC •

    $default  reduce using rule 30 (INIT_VAL)


State 107

   17 CONST_INIT_VAL: L_CBRAC R_CBRAC •

    $default  reduce using rule 17 (CONST_INIT_VAL)


State 108

   19 CONST_INIT_LIST: CONST_INIT_VAL •
   20                | CONST_INIT_VAL • COMMA CONST_INIT_LIST

    COMMA  shift, and go to state 124

    $default  reduce using rule 19 (CONST_INIT_LIST)


State 109

   18 CONST_INIT_VAL: L_CBRAC CONST_INIT_LIST • R_CBRAC

    R_CBRAC  shift, and go to state 125


State 110

   15 CONST_DEF: IDENTIFIER CONST_INDEXES ASSIGN_OP8 CONST_INIT_VAL •

    $default  reduce using rule 15 (CONST_DEF)


State 111

   40 FUNC_FPARAM: INT IDENTIFIER L_SBRAC R_SBRAC •
   42            | INT IDENTIFIER L_SBRAC R_SBRAC • CONST_INDEXES

    L_SBRAC  shift, and go to state 22

    $default  reduce using rule 40 (FUNC_FPARAM)

    CONST_INDEXES  go to state 126


State 112

   52 STMT: IF L_PAR • COND R_PAR STMT
   53     | IF L_PAR • COND R_PAR STMT ELSE STMT

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    ADD_EXP          go to state 127
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    REL_EXP          go to state 128
    EQ_EXP           go to state 129
    COND             go to state 130
    LAND_EXP         go to state 131
    LOR_EXP          go to state 132
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 113

   54 STMT: WHILE L_PAR • COND R_PAR STMT

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    ADD_EXP          go to state 127
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    REL_EXP          go to state 128
    EQ_EXP           go to state 129
    COND             go to state 133
    LAND_EXP         go to state 131
    LOR_EXP          go to state 132
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 114

   56 STMT: CONTINUE COLON •

    $default  reduce using rule 56 (STMT)


State 115

   55 STMT: BREAK COLON •

    $default  reduce using rule 55 (STMT)


State 116

   57 STMT: RETURN COLON •

    $default  reduce using rule 57 (STMT)


State 117

   58 STMT: RETURN EXP • COLON

    COLON  shift, and go to state 134


State 118

   43 BLOCK: L_CBRAC BLOCK_ITEMS R_CBRAC •

    $default  reduce using rule 43 (BLOCK)


State 119

   45 BLOCK_ITEMS: BLOCK_ITEM BLOCK_ITEMS •

    $default  reduce using rule 45 (BLOCK_ITEMS)


State 120

   49 STMT: LVAL ASSIGN_OP8 • EXP COLON

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    EXP              go to state 135
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 121

    9 VAR_INDEXES: L_SBRAC EXP R_SBRAC •
   10            | L_SBRAC EXP R_SBRAC • VAR_INDEXES

    L_SBRAC  shift, and go to state 66

    $default  reduce using rule 9 (VAR_INDEXES)

    VAR_INDEXES  go to state 136


State 122

   72 FUNC_RPARAMS: EXP COMMA FUNC_RPARAMS •

    $default  reduce using rule 72 (FUNC_RPARAMS)


State 123

   32 INIT_LIST: INIT_VAL COMMA INIT_LIST •

    $default  reduce using rule 32 (INIT_LIST)


State 124

   20 CONST_INIT_LIST: CONST_INIT_VAL COMMA • CONST_INIT_LIST

    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 76
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    CONST_INIT_VAL   go to state 108
    CONST_INIT_LIST  go to state 137
    CONST_EXP        go to state 78
    EXP              go to state 38
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 125

   18 CONST_INIT_VAL: L_CBRAC CONST_INIT_LIST R_CBRAC •

    $default  reduce using rule 18 (CONST_INIT_VAL)


State 126

   42 FUNC_FPARAM: INT IDENTIFIER L_SBRAC R_SBRAC CONST_INDEXES •

    $default  reduce using rule 42 (FUNC_FPARAM)


State 127

   62 ADD_EXP: ADD_EXP • ADDMIN_OP3 MUL_EXP
   78 REL_EXP: ADD_EXP •

    ADDMIN_OP3  shift, and go to state 63

    $default  reduce using rule 78 (REL_EXP)


State 128

   79 REL_EXP: REL_EXP • COMP_OP4 ADD_EXP
   80 EQ_EXP: REL_EXP •

    COMP_OP4  shift, and go to state 138

    $default  reduce using rule 80 (EQ_EXP)


State 129

   81 EQ_EXP: EQ_EXP • EQUAL_OP5 REL_EXP
   83 LAND_EXP: EQ_EXP •

    EQUAL_OP5  shift, and go to state 139

    $default  reduce using rule 83 (LAND_EXP)


State 130

   52 STMT: IF L_PAR COND • R_PAR STMT
   53     | IF L_PAR COND • R_PAR STMT ELSE STMT

    R_PAR  shift, and go to state 140


State 131

   84 LAND_EXP: LAND_EXP • AND_OP6 EQ_EXP
   85 LOR_EXP: LAND_EXP •

    AND_OP6  shift, and go to state 141

    $default  reduce using rule 85 (LOR_EXP)


State 132

   82 COND: LOR_EXP •
   86 LOR_EXP: LOR_EXP • OR_OP7 LAND_EXP

    OR_OP7  shift, and go to state 142

    $default  reduce using rule 82 (COND)


State 133

   54 STMT: WHILE L_PAR COND • R_PAR STMT

    R_PAR  shift, and go to state 143


State 134

   58 STMT: RETURN EXP COLON •

    $default  reduce using rule 58 (STMT)


State 135

   49 STMT: LVAL ASSIGN_OP8 EXP • COLON

    COLON  shift, and go to state 144


State 136

   10 VAR_INDEXES: L_SBRAC EXP R_SBRAC VAR_INDEXES •

    $default  reduce using rule 10 (VAR_INDEXES)


State 137

   20 CONST_INIT_LIST: CONST_INIT_VAL COMMA CONST_INIT_LIST •

    $default  reduce using rule 20 (CONST_INIT_LIST)


State 138

   79 REL_EXP: REL_EXP COMP_OP4 • ADD_EXP

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    ADD_EXP          go to state 145
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 139

   81 EQ_EXP: EQ_EXP EQUAL_OP5 • REL_EXP

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    ADD_EXP          go to state 127
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    REL_EXP          go to state 146
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 140

   52 STMT: IF L_PAR COND R_PAR • STMT
   53     | IF L_PAR COND R_PAR • STMT ELSE STMT

    IF           shift, and go to state 82
    WHILE        shift, and go to state 83
    CONTINUE     shift, and go to state 84
    BREAK        shift, and go to state 85
    RETURN       shift, and go to state 86
    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 57
    COLON        shift, and go to state 88
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    BLOCK            go to state 90
    STMT             go to state 147
    EXP              go to state 94
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 95
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 141

   84 LAND_EXP: LAND_EXP AND_OP6 • EQ_EXP

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    ADD_EXP          go to state 127
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    REL_EXP          go to state 128
    EQ_EXP           go to state 148
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 142

   86 LOR_EXP: LOR_EXP OR_OP7 • LAND_EXP

    L_PAR        shift, and go to state 33
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    ADD_EXP          go to state 127
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 44
    REL_EXP          go to state 128
    EQ_EXP           go to state 129
    LAND_EXP         go to state 149
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 143

   54 STMT: WHILE L_PAR COND R_PAR • STMT

    IF           shift, and go to state 82
    WHILE        shift, and go to state 83
    CONTINUE     shift, and go to state 84
    BREAK        shift, and go to state 85
    RETURN       shift, and go to state 86
    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 57
    COLON        shift, and go to state 88
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    BLOCK            go to state 90
    STMT             go to state 150
    EXP              go to state 94
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 95
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 144

   49 STMT: LVAL ASSIGN_OP8 EXP COLON •

    $default  reduce using rule 49 (STMT)


State 145

   62 ADD_EXP: ADD_EXP • ADDMIN_OP3 MUL_EXP
   79 REL_EXP: REL_EXP COMP_OP4 ADD_EXP •

    ADDMIN_OP3  shift, and go to state 63

    $default  reduce using rule 79 (REL_EXP)


State 146

   79 REL_EXP: REL_EXP • COMP_OP4 ADD_EXP
   81 EQ_EXP: EQ_EXP EQUAL_OP5 REL_EXP •

    COMP_OP4  shift, and go to state 138

    $default  reduce using rule 81 (EQ_EXP)


State 147

   52 STMT: IF L_PAR COND R_PAR STMT •
   53     | IF L_PAR COND R_PAR STMT • ELSE STMT

    ELSE  shift, and go to state 151

    ELSE      [reduce using rule 52 (STMT)]
    $default  reduce using rule 52 (STMT)


State 148

   81 EQ_EXP: EQ_EXP • EQUAL_OP5 REL_EXP
   84 LAND_EXP: LAND_EXP AND_OP6 EQ_EXP •

    EQUAL_OP5  shift, and go to state 139

    $default  reduce using rule 84 (LAND_EXP)


State 149

   84 LAND_EXP: LAND_EXP • AND_OP6 EQ_EXP
   86 LOR_EXP: LOR_EXP OR_OP7 LAND_EXP •

    AND_OP6  shift, and go to state 141

    $default  reduce using rule 86 (LOR_EXP)


State 150

   54 STMT: WHILE L_PAR COND R_PAR STMT •

    $default  reduce using rule 54 (STMT)


State 151

   53 STMT: IF L_PAR COND R_PAR STMT ELSE • STMT

    IF           shift, and go to state 82
    WHILE        shift, and go to state 83
    CONTINUE     shift, and go to state 84
    BREAK        shift, and go to state 85
    RETURN       shift, and go to state 86
    L_PAR        shift, and go to state 33
    L_CBRAC      shift, and go to state 57
    COLON        shift, and go to state 88
    DECIMAL_TOK  shift, and go to state 34
    IDENT        shift, and go to state 10
    IDENT_FUNC   shift, and go to state 18
    NOT_OP1      shift, and go to state 35
    ADDMIN_OP3   shift, and go to state 36

    BLOCK            go to state 90
    STMT             go to state 152
    EXP              go to state 94
    ADD_EXP          go to state 39
    MUL_EXP          go to state 40
    UNARY_EXP        go to state 41
    UNARY_OP         go to state 42
    PRIMARY_EXP      go to state 43
    LVAL             go to state 95
    INTEGER          go to state 45
    IDENTIFIER       go to state 46
    IDENTIFIER_FUNC  go to state 47


State 152

   53 STMT: IF L_PAR COND R_PAR STMT ELSE STMT •

    $default  reduce using rule 53 (STMT)
